/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Hotel as PrismaHotel,
  Facility as PrismaFacility,
  Image as PrismaImage,
  City as PrismaCity,
} from "@prisma/client";

export class HotelServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.HotelCountArgs, "select">): Promise<number> {
    return this.prisma.hotel.count(args);
  }

  async hotels(args: Prisma.HotelFindManyArgs): Promise<PrismaHotel[]> {
    return this.prisma.hotel.findMany(args);
  }
  async hotel(args: Prisma.HotelFindUniqueArgs): Promise<PrismaHotel | null> {
    return this.prisma.hotel.findUnique(args);
  }
  async createHotel(args: Prisma.HotelCreateArgs): Promise<PrismaHotel> {
    return this.prisma.hotel.create(args);
  }
  async updateHotel(args: Prisma.HotelUpdateArgs): Promise<PrismaHotel> {
    return this.prisma.hotel.update(args);
  }
  async deleteHotel(args: Prisma.HotelDeleteArgs): Promise<PrismaHotel> {
    return this.prisma.hotel.delete(args);
  }

  async findFacilities(
    parentId: string,
    args: Prisma.FacilityFindManyArgs
  ): Promise<PrismaFacility[]> {
    return this.prisma.hotel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .facilities(args);
  }

  async findImages(
    parentId: string,
    args: Prisma.ImageFindManyArgs
  ): Promise<PrismaImage[]> {
    return this.prisma.hotel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .images(args);
  }

  async getCity(parentId: string): Promise<PrismaCity | null> {
    return this.prisma.hotel
      .findUnique({
        where: { id: parentId },
      })
      .city();
  }
}
