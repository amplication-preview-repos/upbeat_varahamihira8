/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Facility } from "./Facility";
import { FacilityCountArgs } from "./FacilityCountArgs";
import { FacilityFindManyArgs } from "./FacilityFindManyArgs";
import { FacilityFindUniqueArgs } from "./FacilityFindUniqueArgs";
import { CreateFacilityArgs } from "./CreateFacilityArgs";
import { UpdateFacilityArgs } from "./UpdateFacilityArgs";
import { DeleteFacilityArgs } from "./DeleteFacilityArgs";
import { Hotel } from "../../hotel/base/Hotel";
import { FacilityService } from "../facility.service";
@graphql.Resolver(() => Facility)
export class FacilityResolverBase {
  constructor(protected readonly service: FacilityService) {}

  async _facilitiesMeta(
    @graphql.Args() args: FacilityCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Facility])
  async facilities(
    @graphql.Args() args: FacilityFindManyArgs
  ): Promise<Facility[]> {
    return this.service.facilities(args);
  }

  @graphql.Query(() => Facility, { nullable: true })
  async facility(
    @graphql.Args() args: FacilityFindUniqueArgs
  ): Promise<Facility | null> {
    const result = await this.service.facility(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Facility)
  async createFacility(
    @graphql.Args() args: CreateFacilityArgs
  ): Promise<Facility> {
    return await this.service.createFacility({
      ...args,
      data: {
        ...args.data,

        hotel: args.data.hotel
          ? {
              connect: args.data.hotel,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Facility)
  async updateFacility(
    @graphql.Args() args: UpdateFacilityArgs
  ): Promise<Facility | null> {
    try {
      return await this.service.updateFacility({
        ...args,
        data: {
          ...args.data,

          hotel: args.data.hotel
            ? {
                connect: args.data.hotel,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Facility)
  async deleteFacility(
    @graphql.Args() args: DeleteFacilityArgs
  ): Promise<Facility | null> {
    try {
      return await this.service.deleteFacility(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Hotel, {
    nullable: true,
    name: "hotel",
  })
  async getHotel(@graphql.Parent() parent: Facility): Promise<Hotel | null> {
    const result = await this.service.getHotel(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
