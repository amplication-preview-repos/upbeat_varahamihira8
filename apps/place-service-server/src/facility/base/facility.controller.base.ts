/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FacilityService } from "../facility.service";
import { FacilityCreateInput } from "./FacilityCreateInput";
import { Facility } from "./Facility";
import { FacilityFindManyArgs } from "./FacilityFindManyArgs";
import { FacilityWhereUniqueInput } from "./FacilityWhereUniqueInput";
import { FacilityUpdateInput } from "./FacilityUpdateInput";

export class FacilityControllerBase {
  constructor(protected readonly service: FacilityService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Facility })
  async createFacility(
    @common.Body() data: FacilityCreateInput
  ): Promise<Facility> {
    return await this.service.createFacility({
      data: {
        ...data,

        hotel: data.hotel
          ? {
              connect: data.hotel,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        description: true,

        hotel: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Facility] })
  @ApiNestedQuery(FacilityFindManyArgs)
  async facilities(@common.Req() request: Request): Promise<Facility[]> {
    const args = plainToClass(FacilityFindManyArgs, request.query);
    return this.service.facilities({
      ...args,
      select: {
        createdAt: true,
        description: true,

        hotel: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Facility })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async facility(
    @common.Param() params: FacilityWhereUniqueInput
  ): Promise<Facility | null> {
    const result = await this.service.facility({
      where: params,
      select: {
        createdAt: true,
        description: true,

        hotel: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Facility })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFacility(
    @common.Param() params: FacilityWhereUniqueInput,
    @common.Body() data: FacilityUpdateInput
  ): Promise<Facility | null> {
    try {
      return await this.service.updateFacility({
        where: params,
        data: {
          ...data,

          hotel: data.hotel
            ? {
                connect: data.hotel,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          description: true,

          hotel: {
            select: {
              id: true,
            },
          },

          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Facility })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFacility(
    @common.Param() params: FacilityWhereUniqueInput
  ): Promise<Facility | null> {
    try {
      return await this.service.deleteFacility({
        where: params,
        select: {
          createdAt: true,
          description: true,

          hotel: {
            select: {
              id: true,
            },
          },

          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
