/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CountryService } from "../country.service";
import { CountryCreateInput } from "./CountryCreateInput";
import { Country } from "./Country";
import { CountryFindManyArgs } from "./CountryFindManyArgs";
import { CountryWhereUniqueInput } from "./CountryWhereUniqueInput";
import { CountryUpdateInput } from "./CountryUpdateInput";
import { CityFindManyArgs } from "../../city/base/CityFindManyArgs";
import { City } from "../../city/base/City";
import { CityWhereUniqueInput } from "../../city/base/CityWhereUniqueInput";

export class CountryControllerBase {
  constructor(protected readonly service: CountryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Country })
  async createCountry(
    @common.Body() data: CountryCreateInput
  ): Promise<Country> {
    return await this.service.createCountry({
      data: data,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Country] })
  @ApiNestedQuery(CountryFindManyArgs)
  async countries(@common.Req() request: Request): Promise<Country[]> {
    const args = plainToClass(CountryFindManyArgs, request.query);
    return this.service.countries({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Country })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async country(
    @common.Param() params: CountryWhereUniqueInput
  ): Promise<Country | null> {
    const result = await this.service.country({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Country })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCountry(
    @common.Param() params: CountryWhereUniqueInput,
    @common.Body() data: CountryUpdateInput
  ): Promise<Country | null> {
    try {
      return await this.service.updateCountry({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Country })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCountry(
    @common.Param() params: CountryWhereUniqueInput
  ): Promise<Country | null> {
    try {
      return await this.service.deleteCountry({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/cities")
  @ApiNestedQuery(CityFindManyArgs)
  async findCities(
    @common.Req() request: Request,
    @common.Param() params: CountryWhereUniqueInput
  ): Promise<City[]> {
    const query = plainToClass(CityFindManyArgs, request.query);
    const results = await this.service.findCities(params.id, {
      ...query,
      select: {
        country: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/cities")
  async connectCities(
    @common.Param() params: CountryWhereUniqueInput,
    @common.Body() body: CityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      cities: {
        connect: body,
      },
    };
    await this.service.updateCountry({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/cities")
  async updateCities(
    @common.Param() params: CountryWhereUniqueInput,
    @common.Body() body: CityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      cities: {
        set: body,
      },
    };
    await this.service.updateCountry({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/cities")
  async disconnectCities(
    @common.Param() params: CountryWhereUniqueInput,
    @common.Body() body: CityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      cities: {
        disconnect: body,
      },
    };
    await this.service.updateCountry({
      where: params,
      data,
      select: { id: true },
    });
  }
}
